
<div class="container-fluid">
	<div class="page-header">
  		<h1>備忘清單</h1>
	</div>


	<div class="row " style="margin-bottom: 15px;">
		<div class="col-md-6"></div>
		<div class="col-md-1"></div>
		<div class="col-md-4">
			<input style="display:none" id="new_category" type="text" class="form-control" placeholder="add a new categroy">
		</div>
		<div class="col-md-1 checkbox">
			<label>
				<%= check_box_tag('chk_edit_mode')%>
				edit
			</label>
		</div>		
	</div>


	<div class="row" id="show_panel">
	</div>

</div>


<script language="javascript">

var g_timer = null;
var g_isModified = false;

$(document).ready(ready);
//$(document).on('page:load', ready);
//$(document).on('page:change', ready);


function onEvents()
{
	$(document).on( 'keypress', '#new_category', newCategoryOnPress );
	$(document).on( 'keypress', '.form-control.sub-item', newSubItemOnPress );
	
	$(document).on( 'click', '.glyphicon.glyphicon-remove.category-remove', removeCategoryOnclick );
	$(document).on( 'click', '.glyphicon.glyphicon-remove.item-remove', removeItemOnclick );

	$(document).on( 'click', '.glyphicon-chevron-up', itemUpOnclick );
	$(document).on( 'click', '.glyphicon-chevron-down', itemDownOnclick );

	$(document).on( 'click', '.glyphicon-chevron-right', listRightOnclick );
	$(document).on( 'click', '.glyphicon-chevron-left', listLeftOnclick );

	$(document).on( 'dblclick', '.list-group-item', listOnDbclick );
	
	$(document).on( 'mouseover', '.category-panel', listOnOver);
	$(document).on( 'mouseleave', '.category-panel', listOnLeave);

	$(document).on( 'mouseover', '.list-group-item', headOnOver);
	$(document).on( 'mouseleave', '.list-group-item', headOnLeave);	
}


function offEvents()
{
	$(document).off( 'keypress', '#new_category');
	$(document).off( 'keypress', '.form-control.sub-item');
	
	$(document).off( 'click', '.glyphicon.glyphicon-remove.category-remove');
	$(document).off( 'click', '.glyphicon.glyphicon-remove.item-remove');

	$(document).off( 'click', '.glyphicon-chevron-up');
	$(document).off( 'click', '.glyphicon-chevron-down');

	$(document).off( 'click', '.glyphicon-chevron-right');
	$(document).off( 'click', '.glyphicon-chevron-left');

	$(document).off( 'dblclick', '.list-group-item');
	
	$(document).off( 'mouseover', '.category-panel');
	$(document).off( 'mouseleave', '.category-panel');

	$(document).off( 'mouseover', '.list-group-item');
	$(document).off( 'mouseleave', '.list-group-item');
}


function chkEditModeOnClick()
{console.log(arguments.callee.name);
	if( $(this).prop('checked') )
	{
		$('#new_category').slideDown(  );
		onEvents();
	}
	else
	{
		$('#new_category').slideUp(  );
		offEvents();
	}
}



function ready()
{console.log(arguments.callee.name);

	initList();

	offEvents();

	$(document).off( 'click', '#chk_edit_mode');
	$(document).on( 'click', '#chk_edit_mode', chkEditModeOnClick );
	$(document).one( 'page:before-change', unload);

	g_timer = setInterval(onTimer, 5000);
}

function onTimer()
{
	send();
}

function unload()
{
	clearInterval(g_timer);
	send();
}


function send()
{
	if(!g_isModified)
		return;

	var json = extraToJson();
	console.log( json );

	<% if params[:type]=='drink' %>
	var url = "<%= full_url '/foodmenu/update/drink.json' %>";
	<% else %>
	var url = "<%= full_url '/foodmenu/update/food.json' %>";
	<% end %>

	$.ajaxSetup({headers: { "X-CSRF-Token": $('meta[name="csrf-token"]').attr('content') }  });
	$.post( url, { data: json },  function( data ) {console.log( data );});
	g_isModified = false;
}


function extraToJson()
{
	var data =[];
	var i=0;
	$('.category-panel').each(function(){

		var list = $(this).find('.list-name').text();
		data[i] = {'list': list, 'item':[] };

		$(this).find('.item-name').each(function(){
			data[i]['item'].push( $(this).text() );
		});

		i++;
	});

	return JSON.stringify(data);
}


function listRightOnclick()
{
	var obj = $(this).parents('.category-panel');
	if( obj.next('.category-panel').length <= 0 )
		return;

	obj.insertAfter( obj.next('.category-panel') );
	g_isModified = true;
}

function listLeftOnclick()
{
	var obj = $(this).parents('.category-panel');
	if( obj.prev('.category-panel').length <= 0 )
		return;

	obj.insertBefore( obj.prev('.category-panel') );
	g_isModified = true;
}

function itemDownOnclick()
{
	var obj = $(this).parents('.list-group-item');
	if( obj.next().prop('class')!='list-group-item' )
		return;

	obj.insertAfter( obj.next() );
	g_isModified = true;
}


function itemUpOnclick()
{
	var obj = $(this).parents('.list-group-item');
	if( obj.prev().prop('class')!='list-group-item' )
		return;

	obj.insertBefore( obj.prev() );
	g_isModified = true;
}


function listOnDbclick()
{
	var context = $(this).children().first().text();
	var rc = prompt("",context);
	if(rc==null)
		return;

	$(this).children().first().text(rc);
	g_isModified = true;
}


function headOnOver()
{//console.log(arguments.callee.name);

	$(this).find('.pull-right' ).fadeIn( 100 );
}

function headOnLeave()
{//console.log(arguments.callee.name);

	$(this).find('.pull-right' ).fadeOut( 100 );
}


function listOnOver()
{//console.log(arguments.callee.name);

	$(this).find('.list-group-item-sm' ).slideDown( 200 );
}

function listOnLeave()
{//console.log(arguments.callee.name);

	$(this).find('.list-group-item-sm' ).slideUp( 200 );
}


function removeItemOnclick()
{console.log(arguments.callee.name);

	$(this).parent().parent().remove();
	g_isModified = true;
}


function removeCategoryOnclick()
{console.log(arguments.callee.name);

	if(!confirm("Do you remove this list?"))
		return;

	$(this).parents('.category-panel').remove();
	g_isModified = true;
}


function newSubItemOnPress(e)
{console.log(arguments.callee.name);

	code = (e.keyCode ? e.keyCode : e.which);
	if (code != 13)
		return;

	var itemName = $.trim($(this).val());
	if(itemName.length<=0)
		return;

	$(this).val('');
	$(this).parent().before( generateItem( itemName ) );
	g_isModified = true;
}


function newCategoryOnPress(e)
{console.log(arguments.callee.name);

	code = (e.keyCode ? e.keyCode : e.which);
	if (code != 13)
		return;

	var categoryName = $.trim($(this).val());
	if(categoryName.length<=0)
		return;


	var newPanel = generateList(categoryName);
	$('#show_panel').append(newPanel);
	$(this).val('');
	g_isModified = true;
}


function generateItem(itemName)
{
	var data = [
		'<div class="list-group-item">',
			'<span class="item-name">',
				itemName,
			'</span>',
			'<span class="pull-right" style="display:none">',
				'<span class="glyphicon glyphicon-chevron-up item-remove"></span>',
				'<span class="glyphicon glyphicon-chevron-down item-remove"></span>',
				'&nbsp&nbsp',
				'<span class="glyphicon glyphicon-remove item-remove"></span>',
			'</span>',
		'</div>'
	];

	return data.join('');
}


function generateList(categoryName, items)
{
	if(typeof(items)==='undefined')
		items = '';

	var data =[
		'<div class="col-md-2 category-panel">',
			'<div class="list-group">',
				'<div class="list-group-item active">',
					'<span class="list-name">'+categoryName+'</span>',
					'<span class="pull-right" style="display:none">',
						'<span class="glyphicon glyphicon-chevron-left category-remove"></span>',
						'<span class="glyphicon glyphicon-chevron-right category-remove"></span>',
						'&nbsp&nbsp',
						'<span class="glyphicon glyphicon-remove category-remove"></span>',
					'</span>',
				'</div>',
				items,
				'<div class="list-group-item-sm" style="display:none">',
					'<input type="text" class="form-control sub-item" placeholder="add a new item">',
				'</div>',
			'</div>',
		'</div>'
	];

	return data.join('');
}

function initList()
{
	<% unless @data.nil? %>
	
	var initdata = JSON.parse("<%= @data.context %>".replace(/&quot;/g,'"'));

	for(var i=0; i<initdata.length; i++)
	{
		var items = '';
		for(var j=0; j<initdata[i]['item'].length; j++ )
		{
			//console.log( initdata[i]['item'][j]  );
			items += generateItem( initdata[i]['item'][j] );
		}

		var list = generateList( initdata[i]['list'], items );
		$('#show_panel').append( list );

		//console.log(list);
	}	

	<% end %>
}

</script>
